# AGEN - Omni Build Targets
# ==========================
# Build targets for Omni module

# Project configuration
PROJECT := omni
MODULE := agen/code/omni
BUILD_DIR := ../bin
SUPPORT_DIR := ../support
GO_VERSION := $(shell go version | cut -d ' ' -f 3)
BUILD_TIME := $(shell date +%Y-%m-%dT%H:%M:%S)
VERSION := $(shell git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0-dev")
COMMIT := $(shell git rev-parse --short HEAD 2>/dev/null || echo "unknown")

# Go build flags
LDFLAGS := -ldflags "-X main.Version=$(VERSION) -X main.BuildTime=$(BUILD_TIME) -X main.Commit=$(COMMIT)"
BUILD_FLAGS := -v

# Colors for output
RED := \033[31m
GREEN := \033[32m
YELLOW := \033[33m
BLUE := \033[34m
CYAN := \033[36m
RESET := \033[0m

.PHONY: help build test clean demos

help: ## Show this help message
	@echo "$(CYAN)AGEN - Omni Build Targets$(RESET)"
	@echo "=========================="
	@echo ""
	@echo "Available targets:"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "$(GREEN)%-18s$(RESET) %s\n", $$1, $$2}'

# ==============================================================================
# Build Targets
# ==============================================================================

build: ## Build all omni binaries
	@echo "$(BLUE)üî® Building omni...$(RESET)"
	@mkdir -p $(BUILD_DIR)
	@cd ../code/omni && go build $(BUILD_FLAGS) $(LDFLAGS) -o $(BUILD_DIR)/omni ./cmd/...
	@echo "$(GREEN)‚úÖ Build complete! Binaries in $(BUILD_DIR)$(RESET)"

# ==============================================================================
# Testing Targets
# ==============================================================================

test: ## Run all omni tests
	@echo "$(BLUE)üß™ Running omni tests...$(RESET)"
	@cd ../code/omni && go test -race -v ./...
	@echo "$(GREEN)‚úÖ All tests passed!$(RESET)"

test-quick: ## Run quick omni tests
	@echo "$(BLUE)üß™ Running quick tests...$(RESET)"
	@cd ../code/omni && go test -short -v ./...
	@echo "$(GREEN)‚úÖ Quick tests passed!$(RESET)"

test-coverage: ## Run omni tests with coverage
	@echo "$(BLUE)üß™ Running tests with coverage...$(RESET)"
	@mkdir -p $(SUPPORT_DIR)
	@cd ../code/omni && go test -race -cover -coverprofile=$(SUPPORT_DIR)/coverage-omni.out ./...
	@cd ../code/omni && go tool cover -html=$(SUPPORT_DIR)/coverage-omni.out -o $(SUPPORT_DIR)/coverage-omni.html
	@echo "$(GREEN)‚úÖ Coverage report: $(SUPPORT_DIR)/coverage-omni.html$(RESET)"

test-automation-quick: ## Run test automation script (quick)
	@cd ../code/omni && ../../builder/test-omni.sh quick

test-automation-ci: ## Run test automation script (CI/CD)
	@cd ../code/omni && ../../builder/test-omni.sh ci

test-automation-full: ## Run test automation script (full)
	@cd ../code/omni && ../../builder/test-omni.sh full

benchmark: ## Run omni benchmarks
	@echo "$(BLUE)‚ö° Running benchmarks...$(RESET)"
	@cd ../code/omni && go test -bench=. -benchmem ./...

# ==============================================================================
# Demo Targets
# ==============================================================================

demos: ## Run all omni demo applications
	@echo "$(BLUE)üé≠ Running omni demos...$(RESET)"
	@echo "$(CYAN)  üìÅ KV Demo...$(RESET)"
	@cd ../code/omni && go run internal/kv/kv_demo.go && echo "$(GREEN)    ‚úÖ KV Demo completed$(RESET)" || echo "$(RED)    ‚ùå KV Demo failed$(RESET)"
	@echo "$(CYAN)  üï∏Ô∏è  Graph Demo...$(RESET)"
	@cd ../code/omni && go run internal/graph/graph_demo.go && echo "$(GREEN)    ‚úÖ Graph Demo completed$(RESET)" || echo "$(RED)    ‚ùå Graph Demo failed$(RESET)"
	@echo "$(CYAN)  üìÅ File Storage Demo...$(RESET)"
	@cd ../code/omni && go run internal/filestore/filestore_demo.go && echo "$(GREEN)    ‚úÖ File Storage Demo completed$(RESET)" || echo "$(RED)    ‚ùå File Storage Demo failed$(RESET)"
	@echo "$(CYAN)  üöÄ Unified Demo...$(RESET)"
	@cd ../code/omni && go run public/omnistore/unified_demo.go && echo "$(GREEN)    ‚úÖ Unified Demo completed$(RESET)" || echo "$(RED)    ‚ùå Unified Demo failed$(RESET)"
	@echo "$(GREEN)‚úÖ All demos completed!$(RESET)"

demo-kv: ## Run KV store demo
	@echo "$(BLUE)üóÑÔ∏è  Running KV Demo...$(RESET)"
	@cd ../code/omni && go run internal/kv/kv_demo.go

demo-graph: ## Run graph store demo
	@echo "$(BLUE)üï∏Ô∏è  Running Graph Demo...$(RESET)"
	@cd ../code/omni && go run internal/graph/graph_demo.go

demo-files: ## Run file storage demo
	@echo "$(BLUE)üìÅ Running File Storage Demo...$(RESET)"
	@cd ../code/omni && go run internal/filestore/filestore_demo.go

demo-unified: ## Run unified omnistore demo
	@echo "$(BLUE)üöÄ Running Unified Demo...$(RESET)"
	@cd ../code/omni && go run public/omnistore/unified_demo.go

demo-query: ## Run query language demo
	@echo "$(BLUE)üîç Running Query Demo...$(RESET)"
	@cd ../code/omni && go run internal/query/query_demo.go

demo-transaction: ## Run transaction demo
	@echo "$(BLUE)üí≥ Running Transaction Demo...$(RESET)"
	@cd ../code/omni && go run internal/transaction/transaction_demo.go

demo-social: ## Run social network demo
	@echo "$(BLUE)üë• Running Social Network Demo...$(RESET)"
	@cd ../code/omni && go run public/omnistore/social_network_demo.go

# ==============================================================================
# Code Quality Targets
# ==============================================================================

format: ## Format omni code
	@echo "$(BLUE)üé® Formatting code...$(RESET)"
	@cd ../code/omni && go fmt ./...
	@echo "$(GREEN)‚úÖ Code formatted!$(RESET)"

vet: ## Run go vet on omni
	@echo "$(BLUE)üîç Running go vet...$(RESET)"
	@cd ../code/omni && go vet ./...
	@echo "$(GREEN)‚úÖ Vet complete!$(RESET)"

lint: ## Run linters on omni
	@echo "$(BLUE)üîç Running linters...$(RESET)"
	@which golangci-lint > /dev/null || (echo "$(RED)‚ùå golangci-lint not installed$(RESET)" && exit 1)
	@cd ../code/omni && golangci-lint run
	@echo "$(GREEN)‚úÖ Linting complete!$(RESET)"

check: format vet ## Run basic code quality checks

# ==============================================================================
# Development Targets
# ==============================================================================

deps: ## Download omni dependencies
	@echo "$(BLUE)üì¶ Downloading dependencies...$(RESET)"
	@cd ../code/omni && go mod download && go mod tidy
	@echo "$(GREEN)‚úÖ Dependencies updated!$(RESET)"

# ==============================================================================
# Cleanup Targets
# ==============================================================================

clean: ## Clean omni build artifacts
	@echo "$(BLUE)üßπ Cleaning omni artifacts...$(RESET)"
	@rm -f $(BUILD_DIR)/omni*
	@rm -f $(SUPPORT_DIR)/coverage-omni.*
	@rm -f $(SUPPORT_DIR)/test-report/omni*
	@cd ../code/omni && find . -name "*.test" -delete
	@cd ../code/omni && find . -name "*.prof" -delete
	@cd ../code/omni && rm -rf ./demo_* ./temp_* ./tmp_*
	@echo "$(GREEN)‚úÖ Cleanup complete!$(RESET)"
