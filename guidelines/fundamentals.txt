Fundamentals (for AGEN)

Intended Audience: AI / LLM
File: guidelines/fundamentals.txt

⸻

Purpose

If you are a human:
This folder contains operational and collaboration instructions for both AI and human.

If you are an LLM (AI agent):
	•	This file: Overview and operational rules
	•	ALWAYS LOADED: guidelines/core-rules.txt - Quick reference (in system prompt)
	•	Detailed references (use read_file to consult):
		•	guidelines/references/architecture.md - Architecture principles
		•	guidelines/references/agent-patterns.md - Agent development
		•	guidelines/references/config-standards.md - Configuration standards
		•	guidelines/references/testing.md - Testing patterns
	•	Current work:
		•	guidelines/tasks.txt - Current tasks
		•	guidelines/progress.txt - Recent changes history
	•	Documentation:
		•	reflect/architecture/ - Module documentation
		•	reflect/cells/ - Cell definitions

⸻

Overview

Project Name: AGEN
Primary Runtime: alfa — an interactive AI workbench.
You are currently operating within an alfa loop.
Programming Language: Go

Description:
AGEN is a multi-purpose AI workbench that enables AI systems to build, modify, and optimize complex workflows using a composable cell-based pattern and a unified storage system (OmniStore). It provides:
	•	zero-boilerplate agent development,
	•	declarative YAML pipelines, and
	•	self-modification capabilities,

allowing the system to evolve its own codebase via voice or text interfaces.

⸻

Codebase Structure

Note: Whenever the top-level structure changes (e.g., folders added, renamed, or removed), immediately update this description.

.
├── bin
│   └── alfa
├── builder
│   ├── Makefile.omni
│   ├── README.md
│   └── test-omni.sh
├── code
│   ├── agents
│   ├── alfa
│   ├── atomic
│   ├── cellorg
│   ├── omni
│   └── README.md
├── drivers
│   ├── README.md
│   └── tokenizers
├── guidelines
│   ├── fundamentals.txt
│   ├── progress.txt
│   ├── README-template.md
│   └── tasks.txt
├── LICENSE
├── README.md
├── reflect
│   ├── architecture
│   ├── cells
│   ├── manual
│   ├── test-reports
│   └── README.md
├── testdata
│   ├── binary
│   ├── config
│   ├── documents
│   ├── edge-cases
│   ├── images
│   ├── json
│   ├── multi-lang
│   ├── multilingual
│   ├── README.md
│   ├── structured
│   └── xml
├── trained
│   ├── coref
│   ├── download_and_convert.py
│   ├── embeddings
│   ├── ner
│   ├── README.md
│   ├── requirements.txt
│   └── venv
└── workbench
    ├── config
    ├── demos
    ├── projects
    └── README.md


⸻

Folder Responsibilities

bin/ – Build output (all binaries)
builder/ – Makefiles, test scripts
code/ – All Go source code:
	•	atomic/ – Foundation utilities (VFS, VCR) - zero external deps
	•	omni/ – OmniStore unified storage (KV + Graph + Files)
	•	cellorg/ – Cell orchestration framework
	•	agents/ – All 28+ agent implementations
	•	alfa/ – AI workbench runtime
drivers/ – Platform-specific binaries (tokenizers, etc.)
guidelines/ – Operational instructions (this folder)
reflect/ – Architecture docs, cell definitions, test reports
testdata/ – Centralized test data
trained/ – ML models (NER, embeddings, etc.)
workbench/ – Runtime workspace:
	•	config/ – Cell and agent configurations (YAML)
	•	demos/ – Multi-module demo apps
	•	projects/ – VFS-isolated user projects

Key patterns:
	•	Tests co-located with source (*_test.go)
	•	Demos co-located with source (*_demo.go, build tag: //go:build ignore)
	•	Every folder has README.md (use guidelines/README-template.md)

⸻

Collaboration Protocol

alfa = You (the AI Agent)
I = The human collaborator

Task management:
	•	Primary tasks are defined via alfa (the workbench).
	•	Additional or prerequisite tasks are found in guidelines/tasks.txt.
	•	If tasks.txt is empty or outdated, ignore it.

Feedback Process:
If you encounter an issue or improvement opportunity:
	1.	Output the issue in your current alfa response.
	2.	Log it in guidelines/suggestions.txt with a short proposed solution.

Concept and Planning Documents:
May be placed here (in guidelines/), but not final documentation.

Self-test on start:
	•	Check reflect/test-reports/
		•	firsly check if latest-summary.txt indicates test failures
		•	if there are failed test: check latest-report.md for details
			•	try to fix the problem, inform me about outcome
⸻

Task Execution
	1.	Prioritize guidelines/tasks.txt if it defines prerequisites.
	2.	Otherwise, continue regular alfa-assigned tasks.
	3.	Upon completing a set of tasks:
		•	Report progress directly to me in the alfa interface.
		•	Add a summary entry at the top of guidelines/progress.txt:
		•	Include title, timestamp, and short description.
		•	Do not delete or overwrite previous entries.

⸻

Contributions & Constraints

You may:
	•	Create new agents or cells to extend functionality.
	•	Write and improve tests and demos.
	•	Update and optimize READMEs (using the shared template).

Crucial constraint:
	•	Changes you consider must always be fully compliant with the fundamental architecture principles
	•	Core rules are loaded in your system prompt (guidelines/core-rules.txt)
	•	Consult detailed references BEFORE making changes:
		•	use read_file("guidelines/references/architecture.md")
		•	use read_file("guidelines/references/agent-patterns.md")
		•	use read_file("guidelines/references/config-standards.md")

You must not:
	•	Your changes must not violate the fundamental principles in any way!
		•	Core rules are in your system prompt
		•	When in doubt, read guidelines/references/architecture.md
	•	Modify the main runtime (alfa) without approval.
	•	Alter the core cell orchestration pattern.

Before committing:
	1.	Verify code compiles.
	2.	Write tests to confirm correct behavior.
	3.	Ensure tests compile and pass.
	4.	Commit the change.

⸻

Commit Rules
	•	Use the VCR abstraction for commits.
	•	You may add and commit, but never push.
	•	Always remain on the main branch.
	•	Temporary branches are allowed for experiments but must be switched back afterward.

Versioning format: <main>.<feature>.<patch>
	•	Do not alter <main> unless explicitly approved.
	•	Increment <feature> for new agents or cells.
	•	Increment <patch> for tests, bug fixes, or documentation updates.

